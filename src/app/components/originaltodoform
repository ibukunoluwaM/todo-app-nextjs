// to add new todos
"use client";

import { FaPlus } from "react-icons/fa6";
import React, { useState, useRef } from "react";
import { useQueryClient } from "@tanstack/react-query";
import { useSession } from "next-auth/react";
import { NewTodo } from "../todo/page";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { useMutation } from "@tanstack/react-query";
// handling persistence
export const local_todos_key = "addedTodos";

// export function saveTodoToLocalStorage(todo: NewTodo) {
//   const existing = JSON.parse(
//     localStorage.getItem(local_todos_key) ?? "[]"
//   ) as NewTodo[];
//   localStorage.setItem(local_todos_key, JSON.stringify([todo, ...existing]));
// }

export function getTodosFromLocalStorage() {
  return JSON.parse(localStorage.getItem(local_todos_key) || "[]") as NewTodo[];
}

// NewTodo is in the root page.tsx
export type formTodo = Omit<NewTodo, "id">;

function TodoForm() {
  // modal is declared here
  const modalRef = useRef<HTMLDialogElement | null>(null);

  const queryClient = useQueryClient();
  const [newTodo, setNewTodo] = useState("");
  // const [userID, setUserID] = useState("");

  const addtoMutation = useMutation({
    mutationFn: async (newTodoObject: formTodo) => {
      const response = await fetch(
        "https://jsonplaceholder.typicode.com/todos",
        {
          method: "POST",
          headers: {
            "Content-type": "application/json",
          },
          body: JSON.stringify(newTodoObject),
        }
      );

      if (!response.ok) {
        throw new Error("Failed to add new todo!");
      }
      return response.json();
    },
  });

  // gets current user details from nextauthoptions
  const { data: session } = useSession();

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();

    if (!newTodo.trim()) {
      throw new Error("Todo cannot be empty!");
    }

    // make sure user is logged in before trying to save
    if (!session?.user?.id) {
      console.error("User not logged in!");
      return;
    }

    // send todo to your backend API route
    const res = await fetch("/api/todo", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      // only need title → server attaches userId automatically
      body: JSON.stringify({ title: newTodo }),
    });

    // check if server failed
    if (!res.ok) {
      throw new Error("Failed to add new todo.");
    }

    // get the new todo object returned by API
    const todo = await res.json();

    // update the local cache so UI reflects new todo immediately
    queryClient.setQueryData(["todos"], (oldTodos: NewTodo[] = []) => [
      todo,
      ...oldTodos,
    ]);

    // reset input field
    setNewTodo("");

    // close modal
    modalRef.current?.close();
  }

  // onSuccess: (newTodo: NewTodo) => {
  //   const todoWithFakeId = { ...newTodo, id: Date.now() };

  //   saveTodoToLocalStorage(todoWithFakeId);
  //   // Update the cached todos list
  //   queryClient.setQueryData(["todos"], (oldTodos: NewTodo[] = []) => [
  // //    todoWithFakeId,
  //     ...oldTodos,
  //   ]);

  //   // Reset form
  //   setNewTodo("");
  //   setUserID("");

  //   // Close modal
  //   // const modal = document.getElementById("my_modal_2") as HTMLDialogElement | null;
  //   modalRef.current?.close();
  // },

  // handles form submission (alternative version with userId)
  // async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {
  //   e.preventDefault();

  //   if (!newTodo.trim() || !userID) return;

  //   const todoObj = {
  //     userId: userID,
  //     title: newTodo,
  //     completed: false,
  //   };

  //   const res = await fetch("/api/todo", {
  //     method: "POST",
  //     headers: { "Content-Type": "application/json" },
  //     body: JSON.stringify({ title: newTodo }),
  //   });

  //   if (res.ok) {
  //     const todo = await res.json();
  //     const
  //   } else {
  //     throw new Error("Failed to add new todo.");
  //   }
  //   addtoMutation.mutate(todoObj);
  // }

  return (
    <>
      <div className="flex justify-center items-center">
        <p className="inline text-center text-lg">Add new todo: </p>
        <button
          className="btn bg-[#37cdbe] cursor-pointer ml-2"
          onClick={() => {
            modalRef.current?.showModal();
          }}
          aria-label="Add new todo"
          aria-haspopup="dialog"
        >
          <FaPlus aria-hidden="true" />
        </button>
      </div>

      <dialog
        ref={modalRef}
        id="my_modal_2"
        className="modal"
        aria-labelledby="modal_title"
        aria-modal="true"
      >
        <div className="modal-box">
          <form onSubmit={handleSubmit}>
            <h2 className="text-xl mb-6">Add a new Task</h2>
            <label htmlFor="newTask" className="block mb-2">
              Enter new Todo:
            </label>

            <input
              type="text"
              id="newTask"
              value={newTodo}
              onChange={(e) => setNewTodo(e.target.value)}
              placeholder="Enter new todo here..."
              className="input input-accent mb-2 w-[100%]"
              aria-required="true"
            />

            {/* ⚠️ userID section is not used in handleSubmit anymore, 
                but leaving it here since you had it before */}
            {/* 
            <label htmlFor="userId" className="block mb-2">
              Enter User-ID:
            </label>

            <input
              value={userID}
              onChange={(e) => setUserID(e.target.value)}
              id="userId"
              type="number"
              className="input input-accent mb-2 w-[100%]"
              required
              placeholder="Enter your user ID"
              min="1"
              max="50"
              title="Must be between 1 to 50"
              aria-describedby="userid_error"
            />
            */}

            <button type="submit" className="btn btn-accent mt-4">Submit</button>
          </form>
        </div>

        <form method="dialog" className="modal-backdrop">
          <button>close</button>
        </form>
      </dialog>
    </>
  );
}

export default TodoForm;
